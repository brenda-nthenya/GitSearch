{"ast":null,"code":"import { environment } from '../../environments/environment';\nimport { User } from '../user';\nimport { Repos } from '../repos';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(http) {\n      this.http = http;\n      this.repos = [];\n      this.repoSearch = [];\n      this.user = new User(0, '', '', '', '', 0, 0, 0, new Date());\n    }\n\n    getGithubUser(user) {\n      const promise = new Promise((resolve, reject) => {\n        this.http.get(environment.apiUrl + 'users/' + user + '?access_token=' + environment.authToken).toPromise().then(response => {\n          this.user.id = response.id;\n          this.user.name = response.login;\n          this.user.bio = response.bio;\n          this.user.photo = response.avatar_url;\n          this.user.repos = response.repos_url;\n          this.user.following = response.following;\n          this.user.followers = response.followers;\n          this.user.reposNumber = response.public_repos;\n          this.user.dateCreated = response.created_at;\n          this.getUserRepo(response.repos_url);\n          console.log(this.repos);\n          resolve(response);\n        }, err => {\n          // this.user = 'error';\n          reject(err);\n        });\n      });\n    }\n\n    getUserRepo(url) {\n      this.repoSearch.splice(0, this.repoSearch.length);\n      const promise = new Promise((resolve, reject) => {\n        this.http.get(url).toPromise().then(response => {\n          const res = response;\n          this.repos.splice(0, this.repos.length);\n\n          for (const item of res) {\n            const data = new Repos(item.description, item.id, item.language, item.name, item.html_url, item.updated_at);\n            this.repos.push(data);\n          }\n\n          resolve(response);\n        }, err => {\n          reject(err);\n        });\n      });\n      return promise;\n    }\n\n    getRepos(parameters) {\n      const promise = new Promise((resolve, reject) => {\n        this.http.get(environment.apiUrl + 'search/repositories?q=' + parameters + '&per_page=16').toPromise().then(response => {\n          const res = response.items;\n          this.repoSearch.splice(0, this.repoSearch.length);\n\n          for (const item of res) {\n            const data = new Repos(item.description, item.id, item.language, item.name, item.html_url, item.updated_at);\n            this.repoSearch.push(data);\n          }\n\n          resolve(response); // this.load = this.load + 4;\n        }, err => {\n          reject(err);\n        });\n      });\n      return promise;\n    }\n\n  }\n\n  UserService.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  UserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module"}